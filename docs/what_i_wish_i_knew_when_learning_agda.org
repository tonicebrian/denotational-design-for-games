:PROPERTIES:
:ID:       67549577-8c96-4d19-87a8-dd7cef2bb94f
:END:
#+title: What I wish I knew when Learning Agda

- tags :: [[id:11f0edf5-d546-4c55-9081-ad662476cc73][Agda]]

These are my notes for things I've been stumbling upon while learning Agda. This is inpired from
[[https://smunix.github.io/dev.stephendiehl.com/hask/tutorial.pdf][What I Wish I Knew When Learning Haskell]]

[[id:0a14f764-402d-46ff-a89f-15ab4749658f][Conan Elliot]] me pasó este enlace [[https://github.com/sseefried/learning-agda][Sean Seefried learns Agda]]

* Tasks TODO
** Remember yourself that you are working with constructors
If you are like me and you come from a Haskell background, even if you know, you'll mentally read
#+begin_src haskell
suc n
#+end_src
as the function with siganature
#+begin_src haskell
suc :: Int -> Int
#+end_src

but you need to force yourself at remembering that we are working with constructors and that the most suitable
representation is:
#+begin_src haskell
Suc Nat
#+end_src

where Nat is the recursive data type:

#+begin_src haskell
data Nat =
  Zero
  | Suc Nat
#+end_src
** TODO rewrite
https://plfa.github.io/Equality/#rewriting-expanded
* Language basics
** with keyword
In the simplest case the with construct can be used just to discriminate on the result of an intermediate computation. For instance
#+begin_src agda
filter : {A : Set} → (A → Bool) → List A → List A
filter p [] = []
filter p (x ∷ xs) with p x
filter p (x ∷ xs)    | true  = x ∷ filter p xs
filter p (x ∷ xs)    | false = filter p xs
#+end_src
The clause containing the with-abstraction has no right-hand side. Instead it is followed by a number of clauses with an extra argument on the left, separated from the original arguments by a vertical bar (|).

When the original arguments are the same in the new clauses you can use the ... syntax:

#+begin_src agda
filter : {A : Set} → (A → Bool) → List A → List A
filter p [] = []
filter p (x ∷ xs) with p x
...                  | true  = x ∷ filter p xs
...                  | false = filter p xs
#+end_src
In this case ... expands to filter p (x ∷ xs). There are three cases where you have to spell out the left-hand side:

If you want to do further pattern matching on the original arguments.
When the pattern matching on the intermediate result refines some of the other arguments (see Dot patterns).
To disambiguate the clauses of nested with-abstractions (see Nested with-abstractions below).
** Control flow structures
Agda hasn't control flow structures as part of the language. They are functions that you import from libraries. As such
the conditional if can be brought to scope with:

#+begin_src agda
import Data.Bool using (if_then_else_)
#+end_src
* Emacs usage
** How to use a REPL for Agda
Sometimes you want to use a function defined in the module you are writting.
Do ~C-c C-n~ and introduce the expression.
** How to type symbols you copy from the internet
Sometimes you read code and you want to type the symbols in the code but don't know how. Just copy and paste the symbols
in Emacs, put the cursor on top of the symbol and do ~M-x quail-show-key~ . You'll get they keystrokes to reproduce it.
* Proofs
** Learn the type signature of important functions for proofs
*** begin
it is just a placeholder to start a chain of equalities
#+begin_src agda
begin : ∀ {a} {A : Set a} {x y : A} → x ≡ y → x ≡ y
#+end_src
The begin function in Agda is used to start a chain of equalities in a proof. It takes an equality proof x ≡ y and returns the same proof.
*** step
#+begin_src agda
_≡⟨⟩_ : ∀ {a} {A : Set a} {x y z : A} → x ≡ y → y ≡ z → x ≡ z
#+end_src

The ≡<> function in Agda is used to combine two equality proofs into a new proof. Given proofs x ≡ y and y ≡ z, it returns a proof of x ≡ z
*** step with proof
#+begin_src agda
_≡⟨_⟩_ : ∀ {a} {A : Set a} {x y z : A} → x ≡ y → y ≡ z → x ≡ z
#+end_src

 The ≡<_> function in Agda is the same as the ≡<> function. Given proofs x ≡ y and y ≡ z, it returns a proof of x ≡ z.
*** qed
#+begin_src agda
∎ : ∀ {a} {A : Set a} {x y : A} → x ≡ y → x ≡ y
#+end_src

The qed function in Agda is used to end a chain of equalities in a proof. It takes an equality proof x ≡ y and returns the same proof.
